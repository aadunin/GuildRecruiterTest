-- GuildRecruiterTest_Spec.lua
-- –ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤: –∫–æ–º–∞–Ω–¥—ã, –∫–∞–Ω–∞–ª—ã, —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è, UX-—Å–æ–æ–±—â–µ–Ω–∏—è

local T = GuildRecruiterTest

-- –ê–ª–∏–∞—Å –Ω–∞ /gru
local function GRU(cmd)
    local handler = SlashCmdList["GUILDRECRUITER"] or SlashCmdList["GRU"]
    if handler then
        handler(cmd or "")
    else
        error("GuildRecruiter slash command not found (/gru)", 0)
    end
end

-- –•–µ–ª–ø–µ—Ä—ã
local function resetState()
    GR_Settings = {
        message = "üåü –ì–∏–ª—å–¥–∏—è –ú–µ—Å—Ç–Ω—ã–µ –î–µ–¥—ã –Ω–∞–±–∏—Ä–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤! –ü–∏—à–∏—Ç–µ /w –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.",
        channelType = "SAY",
        channelId = nil,
        randomize = false,
        templates = {}
    }
    T._printed = {}
    T._sent = {}
end

-- –£–¥–∞–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã
local function stripColors(s)
    return (tostring(s):gsub("|c%x%x%x%x%x%x%x%x", ""):gsub("|r", ""))
end

local function anyPrinted(pat)
    for _, m in ipairs(T._printed) do
        local clean = stripColors(m)
        if type(clean) == "string" and clean:match(pat) then
            return true
        end
    end
    return false
end

local function firstJoinedChannel()
    local list = { GetChannelList() }
    local i = 1
    while i <= #list do
        local id, name, maybe = list[i], list[i + 1], list[i + 2]
        if type(id) == "number" and type(name) == "string" then
            return id, name
        end
        i = i + (type(maybe) == "boolean" and 3 or 2)
    end
end

-- –°—å—é—Ç—ã
T.describe("Smoke ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –±–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å", function()
    T.it("–ê–¥–¥–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏ /gru –¥–æ—Å—Ç—É–ø–µ–Ω", function(t)
        resetState()
        t.assertTrue(type(SlashCmdList["GUILDRECRUITER"]) == "function" or type(SlashCmdList["GRU"]) == "function", "/gru –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    end)

    T.it("–í—ã–≤–æ–¥ /gru status —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è", function(t)
        resetState()
        GRU("status")
        t.assertTrue(anyPrinted("–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"), "–ï—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—É—Å–∞")
        t.assertTrue(anyPrinted("–ö–∞–Ω–∞–ª:"), "–ï—Å—Ç—å –∫–∞–Ω–∞–ª")
        t.assertTrue(anyPrinted("–®–∞–±–ª–æ–Ω–æ–≤:"), "–ï—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–±–ª–æ–Ω–æ–≤")
    end)
end)

T.describe("–ö–æ–º–∞–Ω–¥–∞ msg", function()
    T.it("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è", function(t)
        resetState()
        GRU("msg –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏")
        t.assertTrue(anyPrinted("–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ"), "UX –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ")
        t.assertTrue(GR_Settings.message == "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏", "–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
    end)

    T.it("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥ ‚Äî –æ–∂–∏–¥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É", function(t)
        resetState()
        GRU("msg")
        t.assertTrue(anyPrinted("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç"), "UX –ø–æ–¥—Å–∫–∞–∑–∫–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
    end)
end)

T.describe("–ö–æ–º–∞–Ω–¥–∞ chan", function()
    T.it("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ GUILD", function(t)
        resetState()
        GRU("chan GUILD")
        t.assertTrue(GR_Settings.channelType == "GUILD", "–¢–∏–ø –∫–∞–Ω–∞–ª–∞ GUILD")
        t.assertTrue(GR_Settings.channelId == nil, "ID —Å–±—Ä–æ—à–µ–Ω")
    end)

    T.it("CHANNEL –ø–æ ID (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã)", function(t)
        resetState()
        local id = firstJoinedChannel()
        if not id then return t.skip("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤") end
        GRU("chan CHANNEL " .. id)
        t.assertTrue(GR_Settings.channelType == "CHANNEL", "–¢–∏–ø CHANNEL")
        t.assertTrue(GR_Settings.channelId == id, "ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    end)

    T.it("CHANNEL –ø–æ –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã)", function(t)
        resetState()
        local id, name = firstJoinedChannel()
        if not id then return t.skip("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤") end
        GRU("chan CHANNEL " .. name)
        t.assertTrue(GR_Settings.channelType == "CHANNEL", "–¢–∏–ø CHANNEL")
        t.assertTrue(GR_Settings.channelId == id, "ID –Ω–∞–π–¥–µ–Ω –ø–æ –∏–º–µ–Ω–∏")
    end)

    T.it("CHANNEL –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É ID ‚Äî UX –æ—à–∏–±–∫–∞", function(t)
        resetState()
        GRU("chan CHANNEL 999")
        t.assertTrue(anyPrinted("–ö–∞–Ω–∞–ª —Å ID"), "–í—ã–≤–µ–¥–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID")
    end)

    T.it("CHANNEL –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∏–º–µ–Ω–∏ ‚Äî UX –æ—à–∏–±–∫–∞", function(t)
        resetState()
        GRU("chan CHANNEL some_fake_channel")
        t.assertTrue(anyPrinted("–Ω–µ –Ω–∞–π–¥–µ–Ω"), "–í—ã–≤–µ–¥–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª")
    end)
end)

T.describe("–®–∞–±–ª–æ–Ω—ã –∏ —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è", function()
    T.it("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ randomize", function(t)
        resetState()
        GRU("addtmpl A")
        GRU("addtmpl B")
        GRU("random on")
        GRU("send")
        t.assertTrue(#T._sent == 1, "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω 1 –≤—ã–∑–æ–≤ SendChatMessage")
        local m = T._sent[1].msg
        t.assertTrue(m == "A" or m == "B", "–í—ã–±—Ä–∞–Ω –æ–¥–∏–Ω –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤")
    end)

    T.it("–ü—É—Å—Ç—ã–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–∏ randomize ‚Äî –∞–≤—Ç–æ–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ", function(t)
        resetState()
        GRU("random on")
        GRU("send")
        t.assertTrue(anyPrinted("—Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü"), "–í—ã–≤–µ–¥–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
        t.assertTrue(GR_Settings.randomize == false, "randomize –≤—ã–∫–ª—é—á–µ–Ω")
    end)

    T.it("–ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–∏ addtmpl", function(t)
        resetState()
        GRU("addtmpl X")
        GRU("addtmpl X")
        if anyPrinted("—É–∂–µ –µ—Å—Ç—å") then
            t.assertTrue(true, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥—É–±–ª–∏–∫–∞—Ç–µ")
        else
            t.skip("–í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ GuildRecruiter –Ω–µ—Ç –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        end
    end)
end)

T.describe("–û—Ç–ø—Ä–∞–≤–∫–∞ –∏ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", function()
    T.it("send –≤ –Ω–µ-CHANNEL", function(t)
        resetState()
        GRU("chan SAY")
        GRU("send")
        t.assertTrue(#T._sent == 1, "–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞")
        t.assertTrue(T._sent[1].ctype == "SAY", "–¢–∏–ø SAY")
    end)

    T.it("send –≤ CHANNEL –±–µ–∑ ID ‚Äî –æ—à–∏–±–∫–∞ UX", function(t)
        resetState()
        GR_Settings.channelType = "CHANNEL"
        GR_Settings.channelId = nil
        GRU("send")
        t.assertTrue(anyPrinted("–ù–µ –∑–∞–¥–∞–Ω channelId"), "UX –æ—à–∏–±–∫–∞ –±–µ–∑ ID")
        t.assertTrue(#T._sent == 0, "–ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    end)

    T.it("listchannels –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏", function(t)
        resetState()
        GRU("listchannels")
        local printed = table.concat(T._printed, "\n")
        if printed:match("%[%d+%]%s+.+") or printed:match("–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã") then
            t.assertTrue(true, "–§–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        else
            t.assertTrue(false, "–§–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        end
    end)
end)
